<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_data_preview_8java" kind="file" language="Java">
    <compoundname>DataPreview.java</compoundname>
    <innerclass refid="classcom_1_1packt_1_1_java_d_l_1_1_price_prediction_1_1_utils_1_1_data_preview" prot="public">com::packt::JavaDL::PricePrediction::Utils::DataPreview</innerclass>
    <innernamespace refid="namespacecom_1_1packt_1_1_java_d_l_1_1_price_prediction_1_1_utils">com::packt::JavaDL::PricePrediction::Utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">package<sp/></highlight><highlight class="normal">com.packt.JavaDL.PricePrediction.Utils;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.io.IOException;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.apache.spark.sql.Dataset;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.apache.spark.sql.Row;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.apache.spark.sql.SparkSession;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>org.apache.spark.sql.functions;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="classcom_1_1packt_1_1_java_d_l_1_1_price_prediction_1_1_utils_1_1_data_preview" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcom_1_1packt_1_1_java_d_l_1_1_price_prediction_1_1_utils_1_1_data_preview" kindref="compound">DataPreview</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main<sp/>(String[]<sp/>args)<sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal"><sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparkSession<sp/>spark<sp/>=<sp/>SparkSession.builder().master(</highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">).appName(</highlight><highlight class="stringliteral">&quot;DataProcess&quot;</highlight><highlight class="normal">).getOrCreate();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spark.conf().set(</highlight><highlight class="stringliteral">&quot;spark.sql.crossJoin.enabled&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;data/prices-split-adjusted.csv&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>data<sp/>from<sp/>csv<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dataset&lt;Row&gt;<sp/>data<sp/>=<sp/>spark.read().option(</highlight><highlight class="stringliteral">&quot;inferSchema&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).option(</highlight><highlight class="stringliteral">&quot;header&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).format(</highlight><highlight class="stringliteral">&quot;csv&quot;</highlight><highlight class="normal">).load(filename)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withColumn(</highlight><highlight class="stringliteral">&quot;openPrice&quot;</highlight><highlight class="normal">,<sp/>functions.col(</highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">).cast(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)).drop(</highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withColumn(</highlight><highlight class="stringliteral">&quot;closePrice&quot;</highlight><highlight class="normal">,<sp/>functions.col(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">).cast(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)).drop(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withColumn(</highlight><highlight class="stringliteral">&quot;lowPrice&quot;</highlight><highlight class="normal">,<sp/>functions.col(</highlight><highlight class="stringliteral">&quot;low&quot;</highlight><highlight class="normal">).cast(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)).drop(</highlight><highlight class="stringliteral">&quot;low&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withColumn(</highlight><highlight class="stringliteral">&quot;highPrice&quot;</highlight><highlight class="normal">,<sp/>functions.col(</highlight><highlight class="stringliteral">&quot;high&quot;</highlight><highlight class="normal">).cast(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)).drop(</highlight><highlight class="stringliteral">&quot;high&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withColumn(</highlight><highlight class="stringliteral">&quot;volumeTmp&quot;</highlight><highlight class="normal">,<sp/>functions.col(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">).cast(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)).drop(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.toDF(</highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;symbol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;low&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;high&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.show(10);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.createOrReplaceTempView(</highlight><highlight class="stringliteral">&quot;stock&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spark.sql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>DISTINCT<sp/>symbol<sp/>FROM<sp/>stock<sp/>GROUP<sp/>BY<sp/>symbol&quot;</highlight><highlight class="normal">).show(10);<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spark.sql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>symbol,<sp/>avg(open)<sp/>as<sp/>avg_open,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;avg(close)<sp/>as<sp/>avg_close,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;avg(low)<sp/>as<sp/>avg_low,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;avg(high)<sp/>as<sp/>avg_high<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;FROM<sp/>stock<sp/>GROUP<sp/>BY<sp/>symbol&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.show(10);<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spark.sql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>symbol,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;MIN(open)<sp/>as<sp/>min_open,<sp/>MAX(open)<sp/>as<sp/>max_open,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;MIN(close)<sp/>as<sp/>min_close,<sp/>MAX(close)<sp/>as<sp/>max_close,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;MIN(low)<sp/>as<sp/>min_low,<sp/>MAX(low)<sp/>as<sp/>max_low,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;MIN(high)<sp/>as<sp/>min_high,<sp/>MAX(high)<sp/>as<sp/>max_high<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;FROM<sp/>stock<sp/>GROUP<sp/>BY<sp/>symbol&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.show(10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>data.select(</highlight><highlight class="stringliteral">&quot;symbol&quot;</highlight><highlight class="normal">).count();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>Symbols:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/main/java/com/packt/JavaDL/PricePrediction/Utils/DataPreview.java"/>
  </compounddef>
</doxygen>
